{"version":3,"sources":["App.js","TodoItem.js","serviceWorker.js","index.js"],"names":["App","global","clickCount","inputArray","state","textboxStatus","userInput","todos","dateInput","timeInput","alert","handleRefresh","bind","handleAdd","handleSubmit","handleChange","handleCancel","handleDate","handleTime","reminder","window","location","reload","event","preventDefault","this","setState","day3","curTime","Date","year","getFullYear","month","getMonth","day","getDate","end","year2","month2","day2","future","futureMonth","futureYear","text","date","time","sort","a","b","console","log","target","value","todoItems","map","item","className","type","name","placeholder","onChange","onClick","React","Component","TodoItem","checkBoxStatus","styleText","handleBoxChange","reminderLogic","props","checked","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bef91450.chunk.js","sourcesContent":["import React from \"react\"\nimport TodoItem from \"./TodoItem\"\nimport './App.css';\n\n\n\nclass App extends React.Component\n{\n  constructor()\n  {\n    super()\n  \n    global.clickCount = 0\n    global.inputArray = []\n  \n \n  \n\n    this.state ={\n                  textboxStatus: \"noTextBox\",\n                  userInput: \"\",\n                  todos: global.inputArray,\n                  dateInput:\"\",\n                  timeInput:\"\",\n                  alert:\"\"\n                }\n\n\n    this.handleRefresh = this.handleRefresh.bind(this)\n    this.handleAdd = this.handleAdd.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleChange=this.handleChange.bind(this)\n    this.handleCancel = this.handleCancel.bind(this)\n    this.handleDate = this.handleDate.bind(this)\n    this.handleTime = this.handleTime.bind(this)\n    this.reminder = this.reminder.bind(this)\n  }\n\n\n\n\n\n\n\n\n\n\n\n  handleRefresh(){window.location.reload(false);}\n\n  handleAdd(event)\n    {\n      event.preventDefault();\n      this.setState({textboxStatus: \"formStyle\", userInput: \"\", dateInput:\"\", timeInput:\"\", alert:\"\"})\n    }\n\n\n\n    reminder(){\n      var curTime = new Date()  \n  var year= curTime.getFullYear()\n  var month= curTime.getMonth()\n  var day = curTime.getDate()\n  \n  var end = new Date(this.state.dateInput);\n  var year2= end.getFullYear()\n  var month2= end.getMonth()\n  var day2 = end.getDate()\n\n\n  var day3\n  var future =day2-day\n  var past = day-day2\n\n  var futureMonth = month2-month;\n  var pastMonth = month-month2;\n  var futureYear = year2-year;\n  var pastYear = year-year2;\n  if (futureYear===1){day3=\"Due next year\"};\n  if (futureYear ===-1){day3=\"Due last year\"}\n  if (futureYear >1){day3=\"due in \"+futureYear+\" year(s) time\"};\n  if (futureYear<1){day3=\"due \" +pastYear+\" year(s) ago\"};\n  if (futureMonth >0 && futureYear===0){day3=\"Due in \"+futureMonth+\" month(s) time\"};\n  if (futureMonth<0 && futureYear===0){day3=\"Due \"+pastMonth+\" month(s) ago\"};\n  if (future>0 && futureMonth===0 && futureYear===0){day3 =\"Due in \"+future+\" day(s)\"};\n  if (future<0 && futureMonth===0 && futureYear===0){day3=\"Due \"+past+ \" day(s) ago\"};\n  if (future===0 && futureMonth===0 && futureYear===0){day3=\"Due today\"};\n  return day3\n\n    }\n\n\n  handleSubmit(event) {\n\n  if (this.state.userInput!==\"\")\n      {\n        global.inputArray[global.clickCount]={text:this.state.userInput, date:this.state.dateInput, time:this.state.timeInput, alert:this.reminder()} \n        global.inputArray.sort(function(a, b){\n    var dateA=new Date(a.date), dateB=new Date(b.date)\n    return dateA-dateB //sort by date ascending\n})\n        event.preventDefault();\n        this.setState({textboxStatus: \"noTextBox\"})\n        global.clickCount++\n        console.log(global.inputArray)\n      } \n    else {\n            event.preventDefault();\n            this.setState({textboxStatus: \"formStyle\", userInput: \"\", dateInput:\"\"})\n          }\n    };\n\n\n  handleCancel(event){\n    event.preventDefault();\n    this.setState({textboxStatus: \"noTextBox\", userInput: \"\", dateInput:\"\", timeInput: \"\"})\n  }\n\n\n  handleDate(event)\n    {\n      this.setState({ dateInput: event.target.value})\n\n\n      \n    }\n\n\n\nhandleTime(event)\n    {\n      this.setState({ timeInput: event.target.value})\n    }\n\n\n\n\n  handleChange(event)\n    {\n      this.setState({ userInput: event.target.value})\n    }\n\n\nrender(){\n              \n                const todoItems = this.state.todos.map(item =><TodoItem item={item}/>)\n\n        return(\n\n          <div className=\"App\">\n           <header className=\"App-header\">\n          <div className=\"todo-list\">\n           <h6 className=\"motivation\">Tick says the Clock...Do what you have to do</h6>\n\n                <form className={this.state.textboxStatus}>\n                    <input type =\"text\" name= \"userInput\" placeholder =\"To do Item\"value={this.state.userInput} onChange={this.handleChange}/><br/>\n                    <input type=\"date\"  name=\"date\" placeholder=\"Due Date\" value={this.state.dateInput} onChange={this.handleDate}/><br/>\n                    <input type=\"time\"  name=\"time\" placeholder=\"Time\" value={this.state.timeInput} onChange={this.handleTime}/><br/>\n                    <button className=\"formButton\" onClick={this.handleSubmit}> OK </button>\n                    <button className=\"formButton\" onClick={this.handleCancel}>CANCEL</button>\n                    \n                  </form>\n                 \n                <button className=\"btn\" onClick={this.handleAdd}>\n                  Add a New Item\n                </button>\n                <button className = \"btn\" onClick={this.handleRefresh}> Start a New List</button>\n    \n            \n            {todoItems}\n\n          </div>\n           </header>\n          </div>\n              )   \n\n        }\n}\n\nexport default App;\n","import React from \"react\"\nimport './App.css';\n\n\n\nclass TodoItem extends React.Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {checkBoxStatus:false, styleText:\"unchecked\", reminder: null, alert:false}\n\n\t\t\n\tthis.handleBoxChange=this.handleBoxChange.bind(this)\n\tthis.reminderLogic= this.reminderLogic.bind(this)\n\n\t}\n\n\n\n\n\n\n  reminderLogic (){\n\n\tvar curTime = new Date()\t\n\tvar year= curTime.getFullYear()\n\tvar month= curTime.getMonth()\n\tvar day = curTime.getDate()\n\t\n\tvar end = new Date(this.props.item.date);\n\tvar year2= end.getFullYear()\n\tvar month2= end.getMonth()\n\tvar day2 = end.getDate()\n\t\n\t\n\tvar day3;\n\tvar future =day2-day\n\tvar past = day-day2\n\n\tvar futureMonth = month2-month;\n\tvar pastMonth = month-month2;\n\tvar futureYear = year2-year;\n\tvar pastYear = year-year2;\n\tif (futureYear===1){day3=false};\n\tif (futureYear ===-1){day3=true};\n\tif (futureYear >1){day3=false}\n\tif (futureYear<1){day3=true}\n\tif (futureMonth >0 && futureYear===0){day3=false}\n\tif (futureMonth<0 && futureYear===0){day3=true}\t\n\tif (future>0 && futureMonth===0 && futureYear===0){day3=false} \n\tif (future<0 && futureMonth===0 && futureYear===0){day3=true}\n\tif (future===0 && futureMonth===0 && futureYear===0){day3=true}\n\n\t\treturn day3;\n\t\n  }\n\n\n\n\n\thandleBoxChange(event){\n\t\tthis.setState({ \n\t\t\tcheckBoxStatus: event.target.checked\n\n\t\t})\n\n\t}\n\n\t\n\n\n\trender(){\n\n\n\n    return (\n\n    \t<div className=\"container\">\n\n        <div className=\"todo-item\">\n            <input type=\"checkbox\" name =\"checkbox\" checked = {this.state.checkBoxStatus} onChange={this.handleBoxChange}/>\n            <p className={this.state.checkBoxStatus ? \"checked\": \"unchecked\"}>{this.props.item.text}</p> \n            <p className=\"date\" >{this.props.item.date}</p><br/>\n        </div>\n         <p className={this.reminderLogic() === true && this.state.checkBoxStatus ==false ? \"reminderAlert\":\"reminder\"}>{this.props.item.alert}</p>\n         </div>\n       \n    )\n}\n}\n\nexport default TodoItem","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}